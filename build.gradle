plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.+'
}

version = project.mod_version
group = 'terrails.xnetgases'

base {
    archivesName = "xnetgases-${project.minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${project.parchment_version}"

    runs {
        client {
            workingDirectory project.file('run')
            args("--width", "1280", "--height", "720")
            property 'forge.logging.console.level', 'debug'

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            mods {
                xnetgases {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.console.level', 'debug'

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            mods {
                xnetgases {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "CurseMaven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // XNet
    implementation fg.deobf("curse.maven:xnet-260912:${project.xnet_fileId}")
    implementation fg.deobf("curse.maven:rftools-base-326041:${project.rftoolsbase_fileId}")
    implementation fg.deobf("curse.maven:mcjtylib-233105:${project.mcjtylib_fileId}")

    // Mekanism
    implementation fg.deobf("curse.maven:mekanism-268560:${project.mekanism_fileId}")
}

java {
    withSourcesJar()
}

artifacts {
    archives sourcesJar
}

tasks.named('jar', Jar).configure {
    manifest.attributes([
            "Specification-Title": "xnetgases",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register('printChangelog') {
    doLast {
        println(fetchChangelog())
    }
}

ext.fetchChangelog = {
    def branch = "git rev-parse --abbrev-ref HEAD".execute().in.text.trim()
    if (branch.isBlank() || branch == "HEAD") {
        throw new GradleException("Branch name could not be fetched.")
    }

    def repoUrl = "https://github.com/Terrails/xnet-gases"
    def changes = new StringBuilder("Latest changes ([See all](${repoUrl}/commits/${branch}))\n---")
    def log = "git log --max-count=30 --no-merges --pretty=format:\"* %s ([%h](${repoUrl}/commit/%H))\"".execute()
    log.in.eachLine { line ->
        if (!line.startsWithIgnoreCase("* bump")) { // version change commits should be ignored
            changes << "\n${line}"
        }
    }

    if (log.waitFor() == 0) {
        return changes.toString()
    } else {
        throw new GradleException("Received an error while executing git log.")
    }
}

tasks.register('publishProduction') {
    dependsOn([tasks.clean, tasks.jar, tasks.sourcesJar])
    finalizedBy(tasks.modrinth, tasks.publishCurseForge)
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${rootProject.modrinth_id}"
    versionNumber = "${project.version}"
    versionName = "${rootProject.minecraft_version}-v${project.version}"
    uploadFile = tasks.jar.getArchiveFile()
    gameVersions = [rootProject.minecraft_version]
    loaders = ["forge"]
    dependencies {
        required.project "xnet"
        required.project "mekanism"
    }
    changelog = fetchChangelog()
    additionalFiles = [tasks.sourcesJar.getArchiveFile()]
}

tasks.register('publishCurseForge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    disableVersionDetection()

    def mainFile = upload(rootProject.curseforge_id, jar.getArchiveFile().get())
    mainFile.displayName = "${rootProject.minecraft_version}-v${project.version}"
    mainFile.releaseType = "release"
    mainFile.changelog = fetchChangelog()
    mainFile.changelogType = "markdown"
    mainFile.addGameVersion(rootProject.minecraft_version)
    mainFile.addModLoader("forge")
    mainFile.addRequirement("xnet", "mekanism")
    mainFile.withAdditionalFile(tasks.sourcesJar.getArchiveFile().get())
}
